// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const addNotification = `-- name: AddNotification :one
INSERT INTO notifications(user_name, user_email, event_name, event_place, event_time)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_name, user_email, event_name, event_place, event_time
`

type AddNotificationParams struct {
	UserName   string
	UserEmail  string
	EventName  string
	EventPlace string
	EventTime  time.Time
}

func (q *Queries) AddNotification(ctx context.Context, arg AddNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, addNotification,
		arg.UserName,
		arg.UserEmail,
		arg.EventName,
		arg.EventPlace,
		arg.EventTime,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.EventName,
		&i.EventPlace,
		&i.EventTime,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :one
DELETE FROM notifications
WHERE id = $1
RETURNING id, user_name, user_email, event_name, event_place, event_time
`

func (q *Queries) DeleteNotification(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, deleteNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.EventName,
		&i.EventPlace,
		&i.EventTime,
	)
	return i, err
}

const getAllNotifications = `-- name: GetAllNotifications :many
SELECT 
	id, user_name, user_email, event_name, event_place, event_time
FROM notifications
`

func (q *Queries) GetAllNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getAllNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.UserEmail,
			&i.EventName,
			&i.EventPlace,
			&i.EventTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNearestNotifications = `-- name: GetNearestNotifications :many
SELECT 
	id, user_name, user_email, event_name, event_place, event_time
FROM notifications
WHERE AGE(NOW(), event_time) <= INTERVAL '1 day'
`

func (q *Queries) GetNearestNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNearestNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.UserEmail,
			&i.EventName,
			&i.EventPlace,
			&i.EventTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
