services:
  nginx:
    image: nginx
    container_name: nginx_container
    ports:
      - 80:80
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - gateway
    networks:
      - netevent

  gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: gateway
    env_file:
      - .env
    ports:
      - "${REST_SERVER_PORT}:${REST_SERVER_PORT}"
      - "${GRPC_SERVER_PORT}:${GRPC_SERVER_PORT}"
    networks:
      - netevent

  # auth:
  #   build: ./auth
  #   container_name: auth_app
  #   restart: always
  #   depends_on:
  #     - auth_postgres
  #   env_file:
  #     - .env
  #   ports:
  #     - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
  #   networks:
  #     - netevent

  # auth_postgres:
  #   image: postgres
  #   container_name: postgresdb
  #   restart: always
  #   ports:
  #     - "${AUTH_POSTGRES_PORT}:5432"
  #   volumes:
  #     - ./data/postgres_data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=${AUTH_POSTGRES_DATABASE}
  #     - POSTGRES_USER=${AUTH_POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASWD}
  #   networks:
  #     - netevent
      
  events:
    build:
      context: ./event_service
      dockerfile: Dockerfile
    depends_on:
      events_postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    env_file:
      - .env
    ports:
      - "${EVENTS_SERVICE_PORT}:${EVENTS_SERVICE_PORT}"
    networks:
      - netevent

  events_postgres:
    image: postgres:latest
    volumes:
      - events_postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${EVENTS_POSTGRES_PASSWORD}
      - POSTGRES_USER=${EVENTS_POSTGRES_USER}
      - POSTGRES_DB=${EVENTS_POSTGRES_DB}
    ports:
      - "${EVENTS_POSTGRES_PORT}:${EVENTS_POSTGRES_PORT}"
    networks:
      - netevent
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${EVENTS_POSTGRES_USER} -d ${EVENTS_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  notification-postgres:
    image: postgres:latest
    container_name: notification_postgres_container
    volumes:
      - notification_postgres_data:/var/lib/postgresql/data
    ports:
      - "${NOTIFICATION_POSTGRES_PORT}:5432"
    networks:
      - netevent
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${NOTIFICATION_POSTGRES_PASSWORD}
      - POSTGRES_USER=${NOTIFICATION_POSTGRES_USER}
      - POSTGRES_DB=${NOTIFICATION_POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOTIFICATION_POSTGRES_USER} -d ${NOTIFICATION_POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10


  notification-service:
    build: ./notification-service
    container_name: notification-service
    env_file: 
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      notification-migrate:
        condition: service_completed_successfully
    networks:
      - netevent

  notification-migrate:
    image: migrate/migrate
    depends_on:
      notification-postgres:
        condition: service_healthy
    env_file: 
      - .env
    networks:
      - netevent
    volumes:
      - ./notification-service/internal/database/migrations/:/database/migrations
    command:
      [
        "-path",
        "/database/migrations/",
        "-database",
        "${NOTIFICATION_DB_URL}",
        "up",
      ]

  redis:
    image: redis:latest
    env_file:
      - .env
    ports:
      - "${EVENTS_REDIS_PORT}:${EVENTS_REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - netevent
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - netevent
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 5 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:latest
    env_file:
      - .env
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "registration:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - netevent
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5

volumes:
  events_postgres_data:
  redis_data:
  notification_postgres_data:

networks:
  netevent:
