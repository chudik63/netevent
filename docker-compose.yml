services:
  events:
    build:
      context: ./event_service
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    env_file:
      - .env
    ports:
      - "${GRPC_SERVER_PORT}:${GRPC_SERVER_PORT}"
    networks:
      - eventservice

  postgres:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - eventservice
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - eventservice
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    ports:
      - "2181:2181"
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - eventservice

  kafka1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    restart: always
    env_file:
      - .env
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA1_HOST}:${KAFKA1_PORT},PLAINTEXT_HOST://localhost:9091
      KAFKA_CREATE_TOPICS: "registration:1:1"
    networks:
      - eventservice
    healthcheck:
      test: nc -vz localhost 9091
      interval: 10s
      timeout: 10s
      retries: 3
  
  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    restart: always
    env_file:
      - .env
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA2_HOST}:${KAFKA2_PORT},PLAINTEXT_HOST://localhost:9092
      KAFKA_CREATE_TOPICS: "registration:1:1"
    networks:
      - eventservice
    healthcheck:
      test: nc -vz localhost 9092
      interval: 10s
      timeout: 10s
      retries: 3
  
  kafka3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    restart: always
    env_file:
      - .env
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA3_HOST}:${KAFKA3_PORT},PLAINTEXT_HOST://localhost:9093
      KAFKA_CREATE_TOPICS: "registration:1:1"
    networks:
      - eventservice
    healthcheck:
      test: nc -vz localhost 9093
      interval: 10s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  kafka_data:

networks:
  eventservice:
