services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - app
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 5 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "mail:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5

  notification-postgres:
    image: postgres:latest
    container_name: notification_postgres_container
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5430:5430
    networks:
      - app
    env_file: "./notification-service/.env"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  notification-service:
    build: ./notification-service
    container_name: notification-service
    env_file: "./notification-service/.env"
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      notification-migrate:
        condition: service_completed_successfully
    networks:
      - app

  notification-migrate:
    image: migrate/migrate
    depends_on:
      notification-postgres:
        condition: service_healthy
    networks:
      - app
    volumes:
      - ./notification-service/internal/database/migrations/:/database/migrations
    command:
      [
        "-path",
        "/database/migrations/",
        "-database",
        "${NOTIFICATION_DB_URL}",
        "up",
      ]

networks:
  app:

volumes:
  postgres_data:
  redis_data:
